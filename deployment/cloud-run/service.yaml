apiVersion: serving.knative.dev/v1
kind: Service
metadata:
  name: pokemon-card-scanner
  labels:
    app: pokemon-card-scanner
    environment: production
    access: internal
  annotations:
    run.googleapis.com/ingress: internal
    run.googleapis.com/ingress-status: internal
spec:
  template:
    metadata:
      labels:
        app: pokemon-card-scanner
        version: "1.0.0"
      annotations:
        # Resource allocation (medium size)
        run.googleapis.com/cpu: "2"
        run.googleapis.com/memory: "2Gi"
        
        # Scaling configuration
        autoscaling.knative.dev/maxScale: "10"
        autoscaling.knative.dev/minScale: "0"
        
        # Request configuration
        run.googleapis.com/execution-environment: gen2
        run.googleapis.com/timeout: "60s"
        
        # Security
        run.googleapis.com/vpc-access-connector: ""
        run.googleapis.com/cloudsql-instances: ""
    spec:
      containerConcurrency: 100
      timeoutSeconds: 60
      containers:
      - name: pokemon-card-scanner
        image: gcr.io/YOUR_PROJECT_ID/pokemon-card-scanner:latest
        ports:
        - name: http1
          containerPort: 8000
        
        env:
        # Core API Configuration (required)
        - name: GOOGLE_API_KEY
          value: "YOUR_GOOGLE_API_KEY"
        - name: POKEMON_TCG_API_KEY
          value: "YOUR_POKEMON_TCG_API_KEY"
        
        # Server Configuration
        - name: ENVIRONMENT
          value: "production"
        - name: LOG_LEVEL
          value: "INFO"
        - name: ENABLE_API_DOCS
          value: "false"
        - name: CORS_ORIGINS
          value: ""
        
        # Error Webhooks (optional)
        - name: ERROR_WEBHOOK_ENABLED
          value: "false"
        - name: ERROR_WEBHOOK_URL
          value: ""
        
        resources:
          limits:
            cpu: "2000m"
            memory: "2Gi"
          requests:
            cpu: "1000m"
            memory: "1Gi"
        
        # Health check configuration
        livenessProbe:
          httpGet:
            path: /api/v1/health
            port: 8000
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          successThreshold: 1
          failureThreshold: 3
        
        readinessProbe:
          httpGet:
            path: /api/v1/health
            port: 8000
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        
        # Startup probe for slow startup
        startupProbe:
          httpGet:
            path: /api/v1/health
            port: 8000
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 30